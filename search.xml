<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据Linux常用命令1</title>
      <link href="/2020/07/24/%E5%A4%A7%E6%95%B0%E6%8D%AELinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A41/"/>
      <url>/2020/07/24/%E5%A4%A7%E6%95%B0%E6%8D%AELinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A41/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><hr><p>title: 大数据Linux常用命令1<br>tags: </p><ul><li>linux<br>categories:</li><li>Code<br>subtitle: “”<br>renderNumberedHeading: true<br>grammar_cjkRuby: true<br>date: 2017-07-30 00:00:00</li></ul><hr><h3 id="1-命令行头">1. 命令行头<a class="post-anchor" href="#1-命令行头"></a></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[root@node1 ~]#<br>root 默认管理员 最大权限<br>node1 机器名称<br>~ 当前该用户的 家目录 /root<br></code></pre></td></tr></tbody></table></figure><h3 id="2-pwd-查看当前光标所在的目录-路径">2. pwd 查看当前光标所在的目录 路径<a class="post-anchor" href="#2-pwd-查看当前光标所在的目录-路径"></a></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[root@node1 ~]# pwd<br>/root<br></code></pre></td></tr></tbody></table></figure><h3 id="3-ls-查看">3. ls 查看<a class="post-anchor" href="#3-ls-查看"></a></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">ls 显示文件夹 文件名称<br>ls -l 显示额外信息 权限 用户用户组 时间 大小<br>ls -l -a 也显示隐藏文件夹 文件<br>[root@node1 ~]# ls -l -a<br>total <span class="hljs-number">40</span><br>dr-xr-x---. <span class="hljs-number">6</span> root root <span class="hljs-number">4096</span> Apr <span class="hljs-number">15</span> <span class="hljs-number">21</span>:<span class="hljs-number">51</span> .<br>dr-xr-xr-x. <span class="hljs-number">17</span> root root <span class="hljs-number">4096</span> Aug <span class="hljs-number">8</span> <span class="hljs-number">2018</span> ..<br>-rw-------. <span class="hljs-number">1</span> root root <span class="hljs-number">3814</span> Apr <span class="hljs-number">15</span> <span class="hljs-number">21</span>:<span class="hljs-number">49</span> .bash_history<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">18</span> Dec <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .bash_logout<br>隐藏文件夹 文件是以.开头<br><br>ls -l -h 仅仅查看文件的大小<br>ls -l -r -t 按时间排序如何快速找到哪些文件 更新了<br><br>ls -l ==》ll 等价<br>ll -a<br>ll -rt<br>ll -h<br></code></pre></td></tr></tbody></table></figure><h3 id="4-mkdir-创建文件夹">4.mkdir 创建文件夹<a class="post-anchor" href="#4-mkdir-创建文件夹"></a></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[root@node1 ~]# mkdir bigdata<br>[root@node1 ~]# <br>[root@node1 ~]# ls<br>bigdata<br>[root@node1 ~]#<br><br>mkdir dir1 dir2 dir3 并<br>mkdir -p dir4/dir5/dir6 串 级联创建<br></code></pre></td></tr></tbody></table></figure><h3 id="5-cd-切换目录-路径">5. cd 切换目录 路径<a class="post-anchor" href="#5-cd-切换目录-路径"></a></h3><figure class="highlight"><table><tbody><tr><td class="code"><pre><code class="hljs js">[root@node1 ~]# cd /<br>Linux系统 从根目录 标识 /<br><br>cd dir1 进入dir1文件夹<br>cd ../ 退上一层目录<br>cd ../../ <span class="hljs-number">2</span>层<br><br><br>root用户 家目录 /root<br>普通xx用户 家目录 /home/xx<br>家目录 是 ~ 表示 <br>如何进家目录:<br>cd /root<br>cd 直接回车 <br>cd ~<br><br>cd - 回退到上一次的目录<br>[root@node1 ~]# cd dir4<br>[root@node1 dir4]# cd dir5/dir6<br>[root@node1 dir6]# <br>[root@node1 dir6]# cd -<br>/root/dir4<br>[root@node1 dir4]#<br></code></pre></td></tr></tbody></table></figure><h3 id="6-命令帮助-help">6. 命令帮助 help<a class="post-anchor" href="#6-命令帮助-help"></a></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[root@node1 /]# ls --help<br>Usage: ls [OPTION]... [FILE]...<br><br>[]标识的 可选<br>... 多个参数<br><br>Usage: ls [OPTIONS]<br>Usage: ls XXX [OPTIONS]<br><br>List information about the FILEs (the current directory by <span class="hljs-keyword">default</span>).<br>Sort entries alphabetically <span class="hljs-keyword">if</span> none <span class="hljs-keyword">of</span> -cftuvSUX nor --sort is specified.<br><br>Mandatory <span class="hljs-built_in">arguments</span> to long options are mandatory <span class="hljs-keyword">for</span> short options too.<br>-a, --all <span class="hljs-keyword">do</span> not ignore entries starting <span class="hljs-keyword">with</span> .<br>-A, --almost-all <span class="hljs-keyword">do</span> not list implied . and ..<br></code></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/01/hello-world/"/>
      <url>/2020/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">Quick Start<a class="post-anchor" href="#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a class="post-anchor" href="#Create-a-new-post"></a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">Run server<a class="post-anchor" href="#Run-server"></a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files<a class="post-anchor" href="#Generate-static-files"></a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites<a class="post-anchor" href="#Deploy-to-remote-sites"></a></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树形数据结构与扁平数据结构互转</title>
      <link href="/2019/12/19/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/19/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="前言">前言<a class="post-anchor" href="#前言"></a></h2><p>近日有需求做链路日志系统，从 elasticsearch 查询到的日志数据是扁平化结构，数据中包含层级关系的字段，前端按照层级展示。</p><p>所以需要对扁平数据做树形处理</p><h2 id="数据源">数据源<a class="post-anchor" href="#数据源"></a></h2><ol><li><p>下面是单条数据结构：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">{<br>     id: <span class="hljs-number">1</span>,<br>     pid: <span class="hljs-number">0</span>,<br>     name: <span class="hljs-string">'1/0'</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>id 为不重复索引值</li><li>pid 为父级 id</li></ul></li><li><p>下面简单构造一个扁平数据结构数据源</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = [<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'1/0'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'2/0'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">-1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'0/-1'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'3/1'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'4/3'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'6/5'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'5/0'</span> },<br>  { <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">pid</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'7/2'</span> }<br>]<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="扁平数据结构-gt-树形数据结构">扁平数据结构=>树形数据结构<a class="post-anchor" href="#扁平数据结构-gt-树形数据结构"></a></h2><blockquote><p>对于下面的使用方法，是有一个 bug 的，那就是数据源的根父节点(最外层的父节点)，必须在数据源的首个位置（索引为 0），所以在使用本方法时需要依据 id 做一次排序</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 先依据id做一次排序，确保根父节点，在数据源首位</span><br>data.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> a.id - b.id)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatToNested</span>(<span class="hljs-params">data</span>) </span>{<br>  <span class="hljs-keyword">let</span> temp = [],<br>    result = []<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i < data.length; i++) {<br>    <span class="hljs-comment">// 将当前item塞入temp中(因为这一步，所以需要对数据源做排序)</span><br>    temp[data[i].id] = data[i]<br><br>    <span class="hljs-comment">// 判断temp中有没有当前item的父类</span><br>    <span class="hljs-keyword">if</span> (temp[data[i].pid]) {<br>      <span class="hljs-comment">// 判断childrenn，不存在则赋值空数组</span><br>      <span class="hljs-keyword">if</span> (!temp[[data[i].pid]][<span class="hljs-string">'children'</span>]) {<br>        temp[[data[i].pid]][<span class="hljs-string">'children'</span>] = []<br>      }<br><br>      <span class="hljs-comment">// 将当前item塞入父类children字段中</span><br>      temp[[data[i].pid]][<span class="hljs-string">'children'</span>].push(data[i])<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-comment">// 在temp中找不到父类，就将item塞入result中</span><br>      result.push(data[i])<br>    }<br>  }<br><br>  <span class="hljs-keyword">return</span> result<br>}<br><br>flatToNested(data)<br></code></pre></td></tr></tbody></table></figure><p>处理完的数据：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = [<br>  {<br>    id: <span class="hljs-number">0</span>,<br>    pid: <span class="hljs-number">-1</span>,<br>    name: <span class="hljs-string">'0/-1'</span>,<br>    children: [<br>      {<br>        id: <span class="hljs-number">1</span>,<br>        pid: <span class="hljs-number">0</span>,<br>        name: <span class="hljs-string">'1/0'</span>,<br>        children: [<br>          {<br>            id: <span class="hljs-number">2</span>,<br>            pid: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">'2/0'</span>,<br>            children: [<br>              {<br>                id: <span class="hljs-number">7</span>,<br>                pid: <span class="hljs-number">2</span>,<br>                name: <span class="hljs-string">'7/2'</span><br>              }<br>            ]<br>          },<br>          {<br>            id: <span class="hljs-number">3</span>,<br>            pid: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">'3/1'</span>,<br>            children: [<br>              {<br>                id: <span class="hljs-number">4</span>,<br>                pid: <span class="hljs-number">3</span>,<br>                name: <span class="hljs-string">'4/3'</span><br>              }<br>            ]<br>          }<br>        ]<br>      },<br>      {<br>        id: <span class="hljs-number">5</span>,<br>        pid: <span class="hljs-number">0</span>,<br>        name: <span class="hljs-string">'5/0'</span>,<br>        children: [<br>          {<br>            id: <span class="hljs-number">6</span>,<br>            pid: <span class="hljs-number">5</span>,<br>            name: <span class="hljs-string">'6/5'</span><br>          }<br>        ]<br>      }<br>    ]<br>  }<br>]<br></code></pre></td></tr></tbody></table></figure><h2 id="树形数据结构-gt-扁平数据结构">树形数据结构=>扁平数据结构<a class="post-anchor" href="#树形数据结构-gt-扁平数据结构"></a></h2><blockquote><p>目前的处理方法就是递归，因为不知道有多次层级，有新的想法请与我联系！</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">NestedToFlat</span>(<span class="hljs-params">data</span>) </span>{<br>  <span class="hljs-keyword">let</span> result = []<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i < data.length; i++) {<br>    result.push({<br>      id: data[i][<span class="hljs-string">'id'</span>],<br>      pid: data[i][<span class="hljs-string">'pid'</span>],<br>      name: data[i][<span class="hljs-string">'name'</span>]<br>    })<br><br>    <span class="hljs-keyword">if</span> (data[i][<span class="hljs-string">'children'</span>]) {<br>      result = result.concat(<span class="hljs-keyword">this</span>.demo(data[i].children))<br>    }<br>  }<br><br>  <span class="hljs-keyword">return</span> result<br>}<br></code></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDFToTopN案例</title>
      <link href="/2018/06/30/UDFToTopN%E4%BD%9C%E4%B8%9A/"/>
      <url>/2018/06/30/UDFToTopN%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><strong>需求:</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">统计最热门的课程Top10<br>http:<span class="hljs-comment">//bigdata.com/course/458655.html      => 458655</span><br>http:<span class="hljs-comment">//bigdata.com/course/458655/2.html?a=b&c=d    => 458655_2</span><br>解析后再统计课程Top10<br></code></pre></td></tr></tbody></table></figure><h3 id="1-使用-MockClassData生成数据">1.使用 MockClassData生成数据<a class="post-anchor" href="#1-使用-MockClassData生成数据"></a></h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">package com.cj.bigdata.hive.hiveWork;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockClassData</span> </span>{<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-built_in">String</span>[] args) throws IOException {<br><span class="hljs-comment">//课程号数组</span><br>        <span class="hljs-built_in">String</span> words[] = {<span class="hljs-string">"123"</span>,<span class="hljs-string">"4354"</span>,<span class="hljs-string">"43541"</span>,<span class="hljs-string">"43542"</span>,<span class="hljs-string">"43543"</span>,<span class="hljs-string">"43544"</span>,<span class="hljs-string">"43545"</span>,<span class="hljs-string">"43546"</span>,<span class="hljs-string">"43547"</span>,<span class="hljs-string">"43548"</span>};<br>        Random random = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-comment">//文件输出流对象</span><br>        BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"data/input/classData.txt"</span>))));<br><span class="hljs-comment">//for循环随机生成数据</span><br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i < <span class="hljs-number">30000</span>; i++) {<br>                bufferedWriter.write(<span class="hljs-string">"http://bigdata.com/course/"</span> + words[random.nextInt(words.length)]);<br>                <span class="hljs-keyword">if</span>(random.nextInt(<span class="hljs-number">4</span>) != <span class="hljs-number">0</span>){<br>                    bufferedWriter.write(<span class="hljs-string">"/"</span> + random.nextInt(<span class="hljs-number">3</span>) + <span class="hljs-string">".html?a=b&c=d"</span>);<br>                    bufferedWriter.newLine();<br>                }<span class="hljs-keyword">else</span> {<br>                    bufferedWriter.write(<span class="hljs-string">".html"</span>);<br>                    bufferedWriter.newLine();<br>                }<br><br><br>        }<br><br>        bufferedWriter.flush();<br>        bufferedWriter.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-创建表">2.创建表<a class="post-anchor" href="#2-创建表"></a></h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">CREATE TABLE <span class="hljs-string">`default.class`</span>(<br>  <span class="hljs-string">`class_str`</span> string)<br></code></pre></td></tr></tbody></table></figure><h3 id="3-将数据upload服务器并import到table-class">3.将数据upload服务器并import到table class<a class="post-anchor" href="#3-将数据upload服务器并import到table-class"></a></h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><code class="hljs plain">load data local inpath '/home/jackson/data/classData.txt'  overwrite into table class;<br>#检查数据<br>select * from class limit 10;<br></code></pre></td></tr></tbody></table></figure><h3 id="4-编写UDFParseClassCode">4.编写UDFParseClassCode<a class="post-anchor" href="#4-编写UDFParseClassCode"></a></h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">package com.cj.bigdata.hive.hiveWork;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UDFParseClassCode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UDF</span> </span>{<br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * http://bigdata.com/course/4354/2.html?a=b&c=d</span><br><span class="hljs-comment">     * http://bigdata.com/course/43548.html</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-built_in">String</span> evaluate(<span class="hljs-built_in">String</span> str){<br>        StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br><br>        <span class="hljs-built_in">String</span>[] splits01 = str.split(<span class="hljs-string">".html"</span>);<br>        <span class="hljs-comment">//http://bigdata.com/course/4354/2或http://bigdata.com/course/43548</span><br>        <span class="hljs-built_in">String</span> splits02 = splits01[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">String</span>[] splits03 = splits02.split(<span class="hljs-string">"/"</span>);<br><br>        <span class="hljs-comment">//用split后的的最后一块的长度来判断是//http://bigdata.com/course/4354/2还是http://bigdata.com/course/43548</span><br>        <span class="hljs-keyword">if</span>(splits03[splits03.length - <span class="hljs-number">1</span>].length() == <span class="hljs-number">1</span>){<br>            buffer.append(splits03[splits03.length - <span class="hljs-number">2</span>]);<br>            buffer.append(<span class="hljs-string">"_"</span>);<br>            buffer.append(splits03[splits03.length - <span class="hljs-number">1</span>]);<br>        }<span class="hljs-keyword">else</span> {<br>            buffer.append(splits03[splits03.length - <span class="hljs-number">1</span>]);<br>        }<br><br>        <span class="hljs-keyword">return</span> buffer.toString();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="5-打包上传生成UDF函数执行sql">5.打包上传生成UDF函数执行sql<a class="post-anchor" href="#5-打包上传生成UDF函数执行sql"></a></h3><h4 id="5-1上传到-HIVE-HOME-auxlib">5.1上传到$HIVE_HOME/auxlib<a class="post-anchor" href="#5-1上传到-HIVE-HOME-auxlib"></a></h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">CREATE TEMPORARY FUNCTION parseClass  AS <span class="hljs-string">'com.cj.bigdata.hive.hiveWork.UDFParseClassCode'</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="5-2sql完成需求">5.2sql完成需求<a class="post-anchor" href="#5-2sql完成需求"></a></h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><code class="hljs plain">select <br>    parseClass(class_str)  class_code,<br>    count(*) topN<br>from class<br>    group by parseClass(class_str)<br>    limit 10<br>    ;<br></code></pre></td></tr></tbody></table></figure><p><strong>结果：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">class_code  topN<br><span class="hljs-number">123</span><span class="hljs-number">801</span><br><span class="hljs-number">123</span>_0  <span class="hljs-number">759</span><br><span class="hljs-number">123</span>_1  <span class="hljs-number">773</span><br><span class="hljs-number">123</span>_2  <span class="hljs-number">749</span><br><span class="hljs-number">4354</span>   <span class="hljs-number">718</span><br><span class="hljs-number">43541</span>  <span class="hljs-number">721</span><br><span class="hljs-number">43541</span>_0        <span class="hljs-number">728</span><br><span class="hljs-number">43541</span>_1    <span class="hljs-number">759</span><br><span class="hljs-number">43541</span>_2<span class="hljs-number">754</span><br><span class="hljs-number">43542</span>  <span class="hljs-number">728</span><br></code></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
            <tag> udf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
